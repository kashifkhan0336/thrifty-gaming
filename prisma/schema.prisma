// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============
//     USER
// ============
model User {
  id       Int         @id @default(autoincrement())
  name     String
  email    String
  password String
  image    String
  orders   OrderInfo[]
}

// ================
//     PRODUCT
// ================
model Product {
  id          Int         @id @default(autoincrement())
  title       String
  description String
  ratings     Float
  specs       String[]
  images      String[] // Cloudinary image urls
  brand       String
  price       Int
  orderItem   OrderItem[]
}

// =============
//     ORDER
// =============
model OrderInfo {
  id Int @id @default(autoincrement())

  /**
   * In SQL, foreign keys are used to create relationships among tables
   * Here, in prisma it is represented with **@relation** syntax
   * NOTE: This field "user" does not exist in database, it is only used to define
   * relations at ORM level.
   */
  customer User @relation(fields: [customer_id], references: [id])

  /**
   * This "user_id" field is the foreign key (which exists in the database)
   * and is used by prisma **@relation** to join orders with user
   */
  customer_id Int

  status       OrderStatus
  items        OrderItem[]
  total_amount Int
  created_at   DateTime
  updated_at   DateTime
}

enum OrderStatus {
  PROCESSING
  OUT_FOR_DELIVERY
  CANCELLED
  DELIVERED
}

model OrderItem {
  id       Int @id @default(autoincrement())
  quantity Int

  order_id   Int
  product_id Int
  product    Product   @relation(fields: [product_id], references: [id])
  order      OrderInfo @relation(fields: [order_id], references: [id])
}
